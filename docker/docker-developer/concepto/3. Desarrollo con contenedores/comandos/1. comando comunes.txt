docker-compose up -d:
    levanta la aplicación en modo demonio.
    no hace el build cada vez que es invocado de las imagenes locales.
    si deseas actualizar tu aplicacion en base a los ultimos cambios de tu codigo, tendras que     ejecutar docker-compose up --build -d.
    un truco para mejorar un proceso es montar tu codigo como un volumen en el fichero docker-compose     .yml, de tal manera que tu container siempre ve los ultimos cambios en tu codigo fuente. si     quieres levantar solo uno o varios de los servicios en un compose, puedes añadir su nombre, por     ejemplo docker-compose up -d redis	

docker-compose up:
    levanta en primer plano, mostrando los logs de los distinitos contenedores. la ejecución sucesiva
    del comando docker-compose up -d solo crear los contenedores que hayan cambiado su imagen o su 
    definicion.

docker-compose pull:
    actualiza las imagenes definidas en el compsoe con la versión actual que haya en el registro. en     otras palabras, si alquien hace un push al registro, actualiza la version de esta imagenes en     nuestra maquina
        --parallel:
            hace el pull en paralelo.
    como todo comando de docker-compose se puede hacer pull de un subconjunto de servicios:
        docker-compose pull servicioA servicioB.

docker-compose build:
    reconstruye las imagenes de los servicios que tengan una seccion de build definida.
    opciones interesantes son:
        --no-cache:
            para invalidar la cache.
        --pull:
            para hacer pull de las imagenes base
        --build-arg key=val:
            para pasar argumentos.
    como todo comando de docker-compose se puede hacer build de un subconjunto de servicios:
        docker-compose build servicioA servicioB

docker-compose push:
    pushea al registro la version local de las imágenes con una sección de build definida.
    como todo comando de docker-compose se puede hacer pull de un subconjunto de servicios:
        docker-compsoe push servicioA servicioB

docker-compose run:
    ejecuta un contenedor de uno de los servicios definido en el compose.
    la diferencia principal con docker-compose up es que permite definir el comando a ejecutar,
    asi como otra informacion de contexto como variable de entorno. el entrypoint, volumenes, el     directorio de trabajo.
    es uno de los comando mas util para el entorno del desarrollador.
    por ejemplo:
        podemos definir un servicio en nuestro docker-compose.yml con todas las dependencias         necesarias para ejecutar nuestro comando de desarrollo. 
    haciendo uso de docker-compose run podemos ejecutar comando aleatorios en ese entorno, evitando     la necesidad de instalar todas las dependencias en la maquina actual.
    el caso más comun es tener un servicio para ejecutar test, como veremos más adelante, pero     podriamos tener para cualquiten tipo de tarea.

docker-compose rm:
    elimina los contenedores y otros recursos como redes, creados a partir de un compose.

docker-compose permite definir practicamente todos los flags que soportan tanto el comando docker run como el docker build, pero docker-compose es mucho mas facil de utilizar.
las opciones más comunes son:

build:
    para indicar que el container se contruye desde un dockerfile local.
    puede tener subcampos como:
        context.
        dockerfile.
	cache_from.
        args.

image:
    para indicar que el container corre una imagen remota.
    tambien indica el nombre de la imagen que se crea si hay un campo build.

command:
    para redefinir el comando que ejecuta el container en lugar del comando definido en la imagen.

enviroment:
    para definir variable de entorno en el contenedor.
    se puede pasar haciendo referencia a un fichero usando la propiedad env_file. si la variable no     tiene un valor dado, su valor se cogerá del entorno de shell que ejecuta el docker-compose up,
    lo que puede ser útil para pasar claves.

depends_on:
    para definir relaciones entre contenedores.

ports:
    para mapear los puertos donde el contenedor acepta conexiones.

