el despliegue de un microservicios suele ser más sencillo que el de una aplicación monolitica debido a su
    mayor sencillez y sus menores dependencias. Por otra parte, los microservicios agilizan los procesos de     desarrollo del software permitiendo casos de uso donde al dia podemos hacer varios despliegues de     distintos microservicios. Es por tanto de casi imposible concebir una arquitectura basada en     microservicios sin la automatización de los procesos de integración y despliegue continuo. esta es la     principal relación entre Docker y los microservicios ya que docker es una herramienta excepcional para     automatizacion de estas tareas. Docker simplifica la automatizacion de construir una imagen,     distribuirla y ejecutarla en cualquier maquina independientemente de la infraestructura.
    esto significa que podemos construir una imagen en nuestros entornos de integración continua.
    correr nuestras pruebas contra ella, distribuirla en nuestro servidores de produccion y por ultimo,     ejecutarla en un contenedor.
    y todo esto ejecutando simplemente unos cuantos comandos de docker.

Dicho esto, una arquitectura de microservicios es sólo un modelo de desarrollo de software que mal aplicado puede traer enormes quebraderos de cabeza. los microservicios adquieren mas importancia cuando tenemos equipos de ingenieria muy grandes, que interesa dividir en subgrupos y cada uno de ellos se encarga de unos o unos pocos microservicios. ademas, el proceso de migrar una arquitectura monolitica a una arquitectura basada en microservicios a la vez, ya que una arquitectura basada en microservicios puede implicar un cambio de las herramientas utilizadas para el despliegue, monitoreo y sistemas de logging de nuestra aplicaciones.

nos gustaria destacar que docker se adapta perfectamente a una arquitectura basade en microservicios, pero seria posible tnene una arquitectura basada en microservicios sin usar contenedor, y por supuesto, es perfectamente posible usar docke en una arquitectura mas monolitica o no basade en microservicios, imaginemos el caso de una aplicación legacy monolitica. solo por el hecho de meter esta aplicación dentro de un contenedor, tal y como es, sus cambios de codigo fuente, nos va a favorecer de muchas de las caracteristicas de docke como son:
    facilidad de levantar entornos locales de desarrollo.
    portabilidad para correr nuestro contenedor en una mac, ubuntu, en intregracion continua o en un
    servidor de produccion.
    facilidad para distribuir las imágenes de nuestra aplicación.

dicho de otra manera. no es necesario modificar nuestra aplicaciones de toda la vida para adaptarlas a docker, docker se apadta a nuestra aplicaciones tal y como son. hay un conjunto de buenas practicas para seguir una arquitectura basada en microservicios, pero solo con eso, buenas practicas que dependiendo del contexto conviene o no aplicar, si no seria axiomas de desarrollo.
