la elección de nombres que revelen intenciones facilita considerablemente la compresión y la modificación del código:
    ¿Para qué sirve el siguiente codigo?:

	public List<int[]> getThem() {
    	    List<int[]> list1 = new ArrayList<int[]>();
    	    for (int[] x : theList)
		if(x[0] == 4)
	    	    list1.add(x);
            return list1;
	}

el problema no es la simplicidad del codigo sino su carácter implicito:
    el grado en el que el contexto no es explicito en el propio código. implicitamente, el código requiere que sepamos
    las respuestas a las siguientes preguntas:
	¿Qué contiene theList?
	¿Qué significado tiene el subíndice cero de un elemento de theList?
	¿Qué importancia tiene el valor 4?
	¿Cómo se usa la lista devuelta?

las respuestas a estas preguntas no se encuentran en el código pero se podrian hacer incluido.
imagine que trabaja en un juego de buscar minas, el tablero es una lista de celdas llamada theList.
Cambiemos el nombte por gameBoard.
Cada celda del teclado se representa por medio de una matriz. el subindice cero es la ubicación de un valor de estado que, cuando
es 4, significa que se ha detectado. al asignar nombres a estos conceptos mejoramos considerablemente el codigo.

	public List<int[]> getFlaggedCells() {
    	    List<int[]> flaggedCells = new ArrayList<int[]>();
    	    for (int[] cell : gameBoard)
		if(cell[STATUS_VALUE] == FLAGGED)
	    	    flaggedCells.add(cell);
            return flaggedCells;
	}	

la simplicidad del código no ha cambiado. sigue teniendo los mismo operadores y constantes y el mismo número de niveles anidados, pero
ahora es mucho más explicito.
podemos crear una sencilla clase para celdas en lugar de usar una matriz de elementos int, puede incluir una función que revele el objetivo (con el nombre isFlagged) para ocultar los números. el resultado es una versión de la funcion:


	public List<Cell> getFlaggedCells() {
    	    List<Cell> flaggedCells = new ArrayList<Cell>();
    	    for (Cell cell : gameBoard)
		if(cell.isFlagged())
	    	    flaggedCells.add(cell);
            return flaggedCells;
	}

con estos sencillos cambios de nombre, es fácil saber qué sucede. es la ventaja de seleccionar nombres adecuados.